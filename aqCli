#!/usr/bin/env python

# python2 only for now

import argparse
import logging
import os
import sys

try:
    from aquosRemote.aquos import AquosTV
    from aquosRemote.aquos import AquosException
    import toml
except ImportError:
    print("Please `pip install aquosRemote toml`")
    sys.exit(1)


def do_work(args):
    rc = 0
    current_file = os.path.realpath(__file__)
    current_dir = os.path.dirname(current_file)
    # TODO: load this from ~/.aqcli.toml or something vs relative to script
    cfg_file = os.path.join(current_dir, "config.toml")

    if os.path.exists(cfg_file):
        config_dict = toml.load(cfg_file, _dict=dict)
        if (
            "username" in config_dict
            and "password" in config_dict
            and "host" in config_dict
        ):
            host = config_dict["host"]
            username = config_dict["username"]
            password = config_dict["password"]
    else:
        print("ERROR: please create a config.toml with host, username, and password")

    aquos = AquosTV(host, username=username, password=password)
    if not args.command:
        print("ERROR: please specify a command or a raw command")
        rc = 1
    elif len(args.command) == 2 and args.command[0] == "send_command":
        # send a raw command
        raw_cmd = args.command[1].strip()
        logging.info("raw_cmd: '{}'".format(raw_cmd))
        try:
            aquos.send_command(raw_cmd)
        except AquosException as e:
            logging.error("ERROR: Command failed!")
            logging.error(e)
            rc = 1
    elif len(args.command) == 1 or len(args.command) == 2:
        # send a command
        if hasattr(aquos, args.command[0]):
            method_to_run = getattr(aquos, args.command[0])
            try:
                if len(args.command) = 2:
                    method_to_run(args.command[1])
                else:
                    method_to_run()
            except AquosException as e:
                logging.error("ERROR: Command failed!")
                logging.error(e)
                rc = 1
        else:
            print("ERROR: invalid command")
            rc = 1
    else:
        print("ERROR: invalid input. check help.")
        rc = 1
    return rc


def main():
    parser = argparse.ArgumentParser(description="Control a Sharp Aquos TV.")
    parser.add_argument(
        "command",
        help="the command to execute, or 'send_command' with a raw command",
        nargs="*",
    )
    the_args = parser.parse_args()
    rc = do_work(the_args)
    sys.exit(rc)


if __name__ == "__main__":
    main()
